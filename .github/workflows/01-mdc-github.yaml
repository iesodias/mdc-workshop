name: Create AWS Instance

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
  CERT_SSH: ${{ secrets.CERT_SSH }}
  ANSIBLE_HOST_KEY_CHECKING: false
  RUN_TERRAFORM_DESTROY: false

on:
  workflow_dispatch:
    inputs:
      destroyInfra:
        description: 'Destroy Infrastructure?'
        required: false
        default: 'false'

jobs:
  Terraform_Plan:
    name: TerraformPlanValidate
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest

    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 

    - name: Terraform Init
      run: |
        terraform -chdir=terraform/ init

    - name: Terraform Validate
      run: terraform -chdir=terraform/ validate -no-color

    - name: Terraform Plan
      run: terraform -chdir=terraform/ plan -no-color -input=false
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  Deploy_Terraform:
      name: 'TerraformApply'
      needs: [Terraform_Plan]
      runs-on: ubuntu-latest

      steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Init
        run: |
          terraform -chdir=terraform/ init

      - name: Terraform Apply
        run: |
          terraform -chdir=terraform/ apply -auto-approve -input=false
      
      - name: Get Public IP
        id: get-ip
        run: echo "INSTANCE_IP=$(terraform -chdir=terraform/ output -raw instance_public_ip)" >> $GITHUB_ENV

      - name: Create Artifact File
        run: echo "${{ env.INSTANCE_IP }}" > artifact.txt

      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: instance-ip
          path: artifact.txt
          if-no-files-found: error

  Destroy_Terraform:
    name: 'ConditionalTerraformDestroy'
    needs: [Deploy_Terraform]
    runs-on: ubuntu-latest
    if: github.event.inputs.destroyInfra == 'true'
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Terraform Init
      run: |
        terraform -chdir=terraform/ init

    - name: Terraform Destroy
      run: |
        terraform -chdir=terraform/ destroy -auto-approve -input=false

  Ansible_Configure:
    name: 'AnsibleInstallApps'
    needs: [Deploy_Terraform]
    if: github.event.inputs.destroyInfra == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: instance-ip
          
      - name: Read IP Address
        id: read-ip
        run: echo "INSTANCE_IP=$(cat artifact.txt)" >> $GITHUB_ENV

      - name: Use IP Address
        run: echo "The IP address is ${{ env.INSTANCE_IP }}"

      - name: Config SSH File
        run: |
          echo "Criando Arquivo"
          echo "$CERT_SSH" > ssh-key.pem
          chmod 600 ssh-key.pem

      - name: Create Ansible Inventory
        run: |
          echo "[webservers]" > inventory
          echo "${{ env.INSTANCE_IP }} ansible_ssh_private_key_file=ssh-key.pem" >> inventory

      - name: Ansible Playbook Install
        run: |
          ansible-playbook -i inventory -u ubuntu ansible/playbook.yaml